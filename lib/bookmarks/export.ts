import type { BookmarkDocument, BookmarkNode } from "./types";

export function bookmarkDocumentToHtml(document: BookmarkDocument): string {
  const title = escapeHtml(document.root?.name || "Bookmarks");
  const lines: string[] = [];

  lines.push("<!DOCTYPE NETSCAPE-Bookmark-file-1>");
  lines.push("<!-- This file was generated by bookmark-saas -->");
  lines.push('<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">');
  lines.push(`<TITLE>${title}</TITLE>`);
  lines.push(`<H1>${title}</H1>`);
  lines.push("<DL><p>");

  for (const child of document.root.children ?? []) {
    appendNode(child, 1, lines);
  }

  lines.push("</DL><p>");

  return lines.join("\n");
}

function appendNode(node: BookmarkNode, depth: number, lines: string[]) {
  if (node.type === "folder") {
    appendFolder(node, depth, lines);
  } else {
    appendBookmark(node, depth, lines);
  }
}

function appendFolder(folder: BookmarkNode, depth: number, lines: string[]) {
  const indent = "  ".repeat(depth);
  const attributes = buildFolderAttributes(folder);
  const title = escapeHtml(folder.name || "未命名目录");
  lines.push(`${indent}<DT><H3${attributes}>${title}</H3>`);
  lines.push(`${indent}<DL><p>`);

  for (const child of folder.children ?? []) {
    appendNode(child, depth + 1, lines);
  }

  lines.push(`${indent}</DL><p>`);
}

function appendBookmark(bookmark: BookmarkNode, depth: number, lines: string[]) {
  const indent = "  ".repeat(depth);
  const attributes = buildBookmarkAttributes(bookmark);
  const title = escapeHtml(bookmark.name || bookmark.url || "未命名网页");
  lines.push(`${indent}<DT><A${attributes}>${title}</A>`);
  if (bookmark.description) {
    lines.push(`${indent}<DD>${escapeHtml(bookmark.description)}`);
  }
}

function buildFolderAttributes(folder: BookmarkNode): string {
  const parts: string[] = [];
  if (folder.add_date) {
    parts.push(`ADD_DATE="${escapeAttribute(folder.add_date)}"`);
  }
  if (folder.last_modified) {
    parts.push(`LAST_MODIFIED="${escapeAttribute(folder.last_modified)}"`);
  }
  if (folder.tags?.includes("toolbar")) {
    parts.push('PERSONAL_TOOLBAR_FOLDER="true"');
  }
  return parts.length ? ` ${parts.join(" ")}` : "";
}

function buildBookmarkAttributes(bookmark: BookmarkNode): string {
  const parts: string[] = [];
  if (bookmark.url) {
    parts.push(`HREF="${escapeAttribute(bookmark.url)}"`);
  }
  if (bookmark.add_date) {
    parts.push(`ADD_DATE="${escapeAttribute(bookmark.add_date)}"`);
  }
  if (bookmark.last_modified) {
    parts.push(`LAST_MODIFIED="${escapeAttribute(bookmark.last_modified)}"`);
  }
  if (bookmark.icon) {
    parts.push(`ICON="${escapeAttribute(bookmark.icon)}"`);
    parts.push(`ICON_URI="${escapeAttribute(bookmark.icon)}"`);
  }
  if (bookmark.tags?.length) {
    parts.push(`TAGS="${escapeAttribute(bookmark.tags.join(","))}"`);
  }
  return parts.length ? ` ${parts.join(" ")}` : "";
}

function escapeHtml(value: string): string {
  return value.replace(/[&<>"']/g, (match) => {
    switch (match) {
      case "&":
        return "&amp;";
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case '"':
        return "&quot;";
      case "'":
        return "&#39;";
      default:
        return match;
    }
  });
}

function escapeAttribute(value: string): string {
  return escapeHtml(value)
    .replace(/\s+/g, " ")
    .trim();
}
